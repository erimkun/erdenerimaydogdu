
erdenerimaydogdu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800087c  0800087c  0001087c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800088c  0800088c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800088c  0800088c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800088c  0800088c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800088c  0800088c  0001088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000890  08000890  00010890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  080008ac  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080008ac  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a57  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000066a  00000000  00000000  00021ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00022150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000171  00000000  00000000  00022358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013acd  00000000  00000000  000224c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002116  00000000  00000000  00035f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007dbaf  00000000  00000000  000380ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000674  00000000  00000000  000b5c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b62d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000864 	.word	0x08000864

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000864 	.word	0x08000864

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3b01      	subs	r3, #1
 8000234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000238:	d301      	bcc.n	800023e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800023a:	2301      	movs	r3, #1
 800023c:	e00f      	b.n	800025e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <SysTick_Config+0x40>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3b01      	subs	r3, #1
 8000244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000246:	210f      	movs	r1, #15
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f7ff ffc2 	bl	80001d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <SysTick_Config+0x40>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <SysTick_Config+0x40>)
 8000258:	2207      	movs	r2, #7
 800025a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800025c:	2300      	movs	r3, #0
}
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	e000e010 	.word	0xe000e010

0800026c <activation>:

// ADC conversion values
uint16_t adc_values[NUM_INPUTS] = {0};

// Activation function (step function)
uint32_t activation(float x) {
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	ed87 0a01 	vstr	s0, [r7, #4]
    return (x >= 0.0f) ? 1 : 0;
 8000276:	edd7 7a01 	vldr	s15, [r7, #4]
 800027a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800027e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000282:	bfac      	ite	ge
 8000284:	2301      	movge	r3, #1
 8000286:	2300      	movlt	r3, #0
 8000288:	b2db      	uxtb	r3, r3
}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <perceptron>:

// Perceptron computation
uint32_t perceptron(float inputs[]) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
    float sum = 0.0f;
 80002a0:	f04f 0300 	mov.w	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]

    // Compute weighted sum
    for (int i = 0; i < NUM_WEIGHTS - 1; i++) {
 80002a6:	2300      	movs	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	e016      	b.n	80002da <perceptron+0x42>
        sum += inputs[i] * weights[i];
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	ed93 7a00 	vldr	s14, [r3]
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <perceptron+0x6c>)
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4413      	add	r3, r2
 80002c0:	edd3 7a00 	vldr	s15, [r3]
 80002c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80002cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d0:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < NUM_WEIGHTS - 1; i++) {
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	dde5      	ble.n	80002ac <perceptron+0x14>
    }

    // Add bias
    sum += bias;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <perceptron+0x70>)
 80002e2:	edd3 7a00 	vldr	s15, [r3]
 80002e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80002ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002ee:	edc7 7a03 	vstr	s15, [r7, #12]

    // Apply activation function
    return activation(sum);
 80002f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80002f6:	f7ff ffb9 	bl	800026c <activation>
 80002fa:	4603      	mov	r3, r0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000000 	.word	0x20000000
 8000308:	2000000c 	.word	0x2000000c

0800030c <delay_ms>:

void delay_ms(uint32_t milliseconds) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    uint32_t start = SysTick->VAL;
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <delay_ms+0x68>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	60fb      	str	r3, [r7, #12]
    uint32_t target = start - milliseconds * (SystemCoreClock / 1000 / 8);
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <delay_ms+0x6c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a17      	ldr	r2, [pc, #92]	; (800037c <delay_ms+0x70>)
 8000320:	fba2 2303 	umull	r2, r3, r2, r3
 8000324:	0a5b      	lsrs	r3, r3, #9
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	fb02 f303 	mul.w	r3, r2, r3
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	60bb      	str	r3, [r7, #8]

    if (start < target) {
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	429a      	cmp	r2, r3
 8000338:	d20b      	bcs.n	8000352 <delay_ms+0x46>
        while (SysTick->VAL >= start && SysTick->VAL < target)
 800033a:	bf00      	nop
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <delay_ms+0x68>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	429a      	cmp	r2, r3
 8000344:	d810      	bhi.n	8000368 <delay_ms+0x5c>
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <delay_ms+0x68>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	429a      	cmp	r2, r3
 800034e:	d8f5      	bhi.n	800033c <delay_ms+0x30>
            ;
    } else {
        while (SysTick->VAL >= start || SysTick->VAL < target)
            ;
    }
}
 8000350:	e00a      	b.n	8000368 <delay_ms+0x5c>
        while (SysTick->VAL >= start || SysTick->VAL < target)
 8000352:	bf00      	nop
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <delay_ms+0x68>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	429a      	cmp	r2, r3
 800035c:	d9fa      	bls.n	8000354 <delay_ms+0x48>
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <delay_ms+0x68>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	429a      	cmp	r2, r3
 8000366:	d8f5      	bhi.n	8000354 <delay_ms+0x48>
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000e010 	.word	0xe000e010
 8000378:	20000010 	.word	0x20000010
 800037c:	10624dd3 	.word	0x10624dd3

08000380 <ADC_Init>:

void ADC_Init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <ADC_Init+0x68>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <ADC_Init+0x68>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <ADC_Init+0x68>)
 8000392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <ADC_Init+0x68>)
 8000396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039a:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER |= GPIO_MODER_MODER0 | GPIO_MODER_MODER1;
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <ADC_Init+0x6c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a12      	ldr	r2, [pc, #72]	; (80003ec <ADC_Init+0x6c>)
 80003a2:	f043 030f 	orr.w	r3, r3, #15
 80003a6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR0 | GPIO_PUPDR_PUPDR1);
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <ADC_Init+0x6c>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <ADC_Init+0x6c>)
 80003ae:	f023 030f 	bic.w	r3, r3, #15
 80003b2:	60d3      	str	r3, [r2, #12]

    ADC1->CR1 = 0;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <ADC_Init+0x70>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = 0;
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <ADC_Init+0x70>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <ADC_Init+0x70>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	635a      	str	r2, [r3, #52]	; 0x34

    ADC1->CR2 |= ADC_CR2_ADON;
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <ADC_Init+0x70>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <ADC_Init+0x70>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6093      	str	r3, [r2, #8]
    delay_ms(1);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ff9a 	bl	800030c <delay_ms>

    ADC1->SMPR2 |= ADC_SMPR2_SMP0_0 | ADC_SMPR2_SMP1_0; // Sampling time: 15 cycles
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <ADC_Init+0x70>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <ADC_Init+0x70>)
 80003de:	f043 0309 	orr.w	r3, r3, #9
 80003e2:	6113      	str	r3, [r2, #16]
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40012000 	.word	0x40012000

080003f4 <ADC_Read>:

uint16_t ADC_Read(uint8_t channel) {
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
    ADC1->SQR3 = 0;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <ADC_Read+0x48>)
 8000400:	2200      	movs	r2, #0
 8000402:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR3 |= channel;
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <ADC_Read+0x48>)
 8000406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	490c      	ldr	r1, [pc, #48]	; (800043c <ADC_Read+0x48>)
 800040c:	4313      	orrs	r3, r2
 800040e:	634b      	str	r3, [r1, #52]	; 0x34

    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <ADC_Read+0x48>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <ADC_Read+0x48>)
 8000416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800041a:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC))
 800041c:	bf00      	nop
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <ADC_Read+0x48>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f9      	beq.n	800041e <ADC_Read+0x2a>
        ;

    return ADC1->DR;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <ADC_Read+0x48>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	b29b      	uxth	r3, r3
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40012000 	.word	0x40012000

08000440 <PWM_Init>:

void PWM_Init(void) {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000444:	4b25      	ldr	r3, [pc, #148]	; (80004dc <PWM_Init+0x9c>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a24      	ldr	r2, [pc, #144]	; (80004dc <PWM_Init+0x9c>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000450:	4b22      	ldr	r3, [pc, #136]	; (80004dc <PWM_Init+0x9c>)
 8000452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000454:	4a21      	ldr	r2, [pc, #132]	; (80004dc <PWM_Init+0x9c>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER |= GPIO_MODER_MODER5_1;
 800045c:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <PWM_Init+0xa0>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1f      	ldr	r2, [pc, #124]	; (80004e0 <PWM_Init+0xa0>)
 8000462:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000466:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= 0x00100000; // AF1 (TIM2_CH1)
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <PWM_Init+0xa0>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <PWM_Init+0xa0>)
 800046e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000472:	6213      	str	r3, [r2, #32]

    TIM2->PSC = SystemCoreClock / 10000 - 1; // 10 kHz PWM frequency
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <PWM_Init+0xa4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <PWM_Init+0xa8>)
 800047a:	fba2 2303 	umull	r2, r3, r2, r3
 800047e:	0b5b      	lsrs	r3, r3, #13
 8000480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000484:	3b01      	subs	r3, #1
 8000486:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->ARR = 1000; // Period
 8000488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // PWM mode 1
 8000492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80004a0:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Preload enable
 80004a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	6193      	str	r3, [r2, #24]

    TIM2->CCER |= TIM_CCER_CC1E; // Enable capture/compare channel 1 output
 80004b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6213      	str	r3, [r2, #32]

    TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2
 80004c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000
 80004e4:	20000010 	.word	0x20000010
 80004e8:	d1b71759 	.word	0xd1b71759

080004ec <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(uint32_t duty_cycle) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = duty_cycle;
 80004f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6353      	str	r3, [r2, #52]	; 0x34
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SystemInit>:

void SystemInit(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    SCB->VTOR = FLASH_BASE | 0x00;
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <SystemInit+0x98>)
 800050e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000512:	609a      	str	r2, [r3, #8]
    RCC->CR |= RCC_CR_HSEON;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <SystemInit+0x9c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <SystemInit+0x9c>)
 800051a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800051e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY))
 8000520:	bf00      	nop
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <SystemInit+0x9c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <SystemInit+0x1a>
        ;
    RCC->CR |= RCC_CR_CSSON;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <SystemInit+0x9c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <SystemInit+0x9c>)
 8000534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000538:	6013      	str	r3, [r2, #0]
    RCC->PLLCFGR = (8 << RCC_PLLCFGR_PLLM_Pos) |
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <SystemInit+0x9c>)
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <SystemInit+0xa0>)
 800053e:	605a      	str	r2, [r3, #4]
                   (336 << RCC_PLLCFGR_PLLN_Pos) |
                   (4 << RCC_PLLCFGR_PLLP_Pos) |
                   RCC_PLLCFGR_PLLSRC_HSE;
    RCC->CR |= RCC_CR_PLLON;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <SystemInit+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <SystemInit+0x9c>)
 8000546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800054a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY))
 800054c:	bf00      	nop
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <SystemInit+0x9c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <SystemInit+0x46>
        ;
    FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <SystemInit+0xa4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <SystemInit+0xa4>)
 8000560:	f043 0305 	orr.w	r3, r3, #5
 8000564:	6013      	str	r3, [r2, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 |
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <SystemInit+0x9c>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <SystemInit+0x9c>)
 800056c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6093      	str	r3, [r2, #8]
                 RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8000576:	bf00      	nop
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <SystemInit+0x9c>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f003 030c 	and.w	r3, r3, #12
 8000580:	2b08      	cmp	r3, #8
 8000582:	d1f9      	bne.n	8000578 <SystemInit+0x70>
        ;
    SystemCoreClockUpdate();
 8000584:	f000 f88c 	bl	80006a0 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 1000);
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <SystemInit+0xa8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <SystemInit+0xac>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	099b      	lsrs	r3, r3, #6
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe47 	bl	8000228 <SysTick_Config>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	40023800 	.word	0x40023800
 80005a8:	00445408 	.word	0x00445408
 80005ac:	40023c00 	.word	0x40023c00
 80005b0:	20000010 	.word	0x20000010
 80005b4:	10624dd3 	.word	0x10624dd3

080005b8 <main>:

int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
    SystemInit();
 80005be:	f7ff ffa3 	bl	8000508 <SystemInit>
    ADC_Init();
 80005c2:	f7ff fedd 	bl	8000380 <ADC_Init>
    PWM_Init();
 80005c6:	f7ff ff3b 	bl	8000440 <PWM_Init>

    while (1) {
        // Read ADC values for XOR gate inputs
        adc_values[0] = ADC_Read(0);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ff12 	bl	80003f4 <ADC_Read>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <main+0x8c>)
 80005d6:	801a      	strh	r2, [r3, #0]
        adc_values[1] = ADC_Read(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff ff0b 	bl	80003f4 <ADC_Read>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <main+0x8c>)
 80005e4:	805a      	strh	r2, [r3, #2]

        // Normalize ADC values between 0 and 1
        float inputs[NUM_INPUTS];
        for (int i = 0; i < NUM_INPUTS; i++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e015      	b.n	8000618 <main+0x60>
            inputs[i] = adc_values[i] / 4095.0f;
 80005ec:	4a15      	ldr	r2, [pc, #84]	; (8000644 <main+0x8c>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f4:	ee07 3a90 	vmov	s15, r3
 80005f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005fc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000648 <main+0x90>
 8000600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3310      	adds	r3, #16
 800060a:	443b      	add	r3, r7
 800060c:	3b10      	subs	r3, #16
 800060e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < NUM_INPUTS; i++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b01      	cmp	r3, #1
 800061c:	dde6      	ble.n	80005ec <main+0x34>
        }

        // Apply perceptron and generate PWM output
        uint32_t output = perceptron(inputs);
 800061e:	463b      	mov	r3, r7
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fe39 	bl	8000298 <perceptron>
 8000626:	60b8      	str	r0, [r7, #8]
        PWM_SetDutyCycle(output ? 1000 : 0);
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <main+0x7c>
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	e000      	b.n	8000636 <main+0x7e>
 8000634:	2300      	movs	r3, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff58 	bl	80004ec <PWM_SetDutyCycle>

        delay_ms(10); // Delay for 10 milliseconds
 800063c:	200a      	movs	r0, #10
 800063e:	f7ff fe65 	bl	800030c <delay_ms>
    while (1) {
 8000642:	e7c2      	b.n	80005ca <main+0x12>
 8000644:	20000034 	.word	0x20000034
 8000648:	457ff000 	.word	0x457ff000

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f8ac 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	2302      	movs	r3, #2
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	2302      	movs	r3, #2
 80006b8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemCoreClockUpdate+0xec>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f003 030c 	and.w	r3, r3, #12
 80006c2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d011      	beq.n	80006ee <SystemCoreClockUpdate+0x4e>
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d844      	bhi.n	800075a <SystemCoreClockUpdate+0xba>
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d003      	beq.n	80006de <SystemCoreClockUpdate+0x3e>
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d004      	beq.n	80006e6 <SystemCoreClockUpdate+0x46>
 80006dc:	e03d      	b.n	800075a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <SystemCoreClockUpdate+0xf0>)
 80006e0:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <SystemCoreClockUpdate+0xf4>)
 80006e2:	601a      	str	r2, [r3, #0]
      break;
 80006e4:	e03d      	b.n	8000762 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <SystemCoreClockUpdate+0xf0>)
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <SystemCoreClockUpdate+0xf8>)
 80006ea:	601a      	str	r2, [r3, #0]
      break;
 80006ec:	e039      	b.n	8000762 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006ee:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemCoreClockUpdate+0xec>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	0d9b      	lsrs	r3, r3, #22
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <SystemCoreClockUpdate+0xec>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000702:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00c      	beq.n	8000724 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800070a:	4a23      	ldr	r2, [pc, #140]	; (8000798 <SystemCoreClockUpdate+0xf8>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <SystemCoreClockUpdate+0xec>)
 8000714:	6852      	ldr	r2, [r2, #4]
 8000716:	0992      	lsrs	r2, r2, #6
 8000718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e00b      	b.n	800073c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemCoreClockUpdate+0xf4>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	fbb2 f3f3 	udiv	r3, r2, r3
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <SystemCoreClockUpdate+0xec>)
 800072e:	6852      	ldr	r2, [r2, #4]
 8000730:	0992      	lsrs	r2, r2, #6
 8000732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <SystemCoreClockUpdate+0xec>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	f003 0303 	and.w	r3, r3, #3
 8000746:	3301      	adds	r3, #1
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	fbb2 f3f3 	udiv	r3, r2, r3
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <SystemCoreClockUpdate+0xf0>)
 8000756:	6013      	str	r3, [r2, #0]
      break;
 8000758:	e003      	b.n	8000762 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <SystemCoreClockUpdate+0xf0>)
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <SystemCoreClockUpdate+0xf4>)
 800075e:	601a      	str	r2, [r3, #0]
      break;
 8000760:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <SystemCoreClockUpdate+0xec>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	091b      	lsrs	r3, r3, #4
 8000768:	f003 030f 	and.w	r3, r3, #15
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <SystemCoreClockUpdate+0xfc>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <SystemCoreClockUpdate+0xf0>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	fa22 f303 	lsr.w	r3, r2, r3
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <SystemCoreClockUpdate+0xf0>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40023800 	.word	0x40023800
 8000790:	20000010 	.word	0x20000010
 8000794:	00f42400 	.word	0x00f42400
 8000798:	017d7840 	.word	0x017d7840
 800079c:	0800087c 	.word	0x0800087c

080007a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007a8:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007bc:	4c0b      	ldr	r4, [pc, #44]	; (80007ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ca:	f7ff fe9d 	bl	8000508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ce:	f000 f825 	bl	800081c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d2:	f7ff fef1 	bl	80005b8 <main>
  bx  lr    
 80007d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80007e4:	08000894 	.word	0x08000894
  ldr r2, =_sbss
 80007e8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80007ec:	2000003c 	.word	0x2000003c

080007f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000014 	.word	0x20000014
 8000818:	20000038 	.word	0x20000038

0800081c <__libc_init_array>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	4d0d      	ldr	r5, [pc, #52]	; (8000854 <__libc_init_array+0x38>)
 8000820:	4c0d      	ldr	r4, [pc, #52]	; (8000858 <__libc_init_array+0x3c>)
 8000822:	1b64      	subs	r4, r4, r5
 8000824:	10a4      	asrs	r4, r4, #2
 8000826:	2600      	movs	r6, #0
 8000828:	42a6      	cmp	r6, r4
 800082a:	d109      	bne.n	8000840 <__libc_init_array+0x24>
 800082c:	4d0b      	ldr	r5, [pc, #44]	; (800085c <__libc_init_array+0x40>)
 800082e:	4c0c      	ldr	r4, [pc, #48]	; (8000860 <__libc_init_array+0x44>)
 8000830:	f000 f818 	bl	8000864 <_init>
 8000834:	1b64      	subs	r4, r4, r5
 8000836:	10a4      	asrs	r4, r4, #2
 8000838:	2600      	movs	r6, #0
 800083a:	42a6      	cmp	r6, r4
 800083c:	d105      	bne.n	800084a <__libc_init_array+0x2e>
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	f855 3b04 	ldr.w	r3, [r5], #4
 8000844:	4798      	blx	r3
 8000846:	3601      	adds	r6, #1
 8000848:	e7ee      	b.n	8000828 <__libc_init_array+0xc>
 800084a:	f855 3b04 	ldr.w	r3, [r5], #4
 800084e:	4798      	blx	r3
 8000850:	3601      	adds	r6, #1
 8000852:	e7f2      	b.n	800083a <__libc_init_array+0x1e>
 8000854:	0800088c 	.word	0x0800088c
 8000858:	0800088c 	.word	0x0800088c
 800085c:	0800088c 	.word	0x0800088c
 8000860:	08000890 	.word	0x08000890

08000864 <_init>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	bf00      	nop
 8000868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086a:	bc08      	pop	{r3}
 800086c:	469e      	mov	lr, r3
 800086e:	4770      	bx	lr

08000870 <_fini>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	bf00      	nop
 8000874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000876:	bc08      	pop	{r3}
 8000878:	469e      	mov	lr, r3
 800087a:	4770      	bx	lr
